<?php

namespace BlackRook\TaskBundle\Entity;
use Gedmo\Tree\Entity\Repository\NestedTreeRepository;

/**
 * TaskRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TaskRepository extends NestedTreeRepository
{
    public function findProjectTasks($project_id){
        $qb = $this->_em->createQueryBuilder();
        $qb->select('t')
            ->from('BlackRook\Tasks', 't')
            ->where('t.project_id = :project_id')
            ->setParameter('project_id', $project_id);

        return $qb->getQuery()->getResult();
    }

    /**
     * Find tasks completed between two dates
     *
     * @param DateTime $from Find tasks completed after this DateTime
     * @param DateTime $to Find tasks completed before this DateTime
     * @return array The query result
     */
    public function findCompletedTasks($from = '', $to = ''){

        $qb = $this->_em->createQueryBuilder();
        $qb->select('t')
            ->from('BlackRook\TaskBundle\Entity\Task', 't')
            ->where('t.completedAt IS NOT NULL')
            ->orderBy('t.completedAt', 'DESC')
            ->where('t.completedAt < :to')
            ->setParameter('to', $this->_buildDateTime($to));

        // If there is a from set the date
        // This allows us to find tasks completed in the last 7 days like so
        // TaskRepository::findCompletedTasks('-7 days');
        if($from) {
            $qb->andWhere('t.completedAt > :fromDateTime')
                ->setParameter('fromDateTime', $this->_buildDateTime($from));
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * Find tasks due to start between two dates
     *
     * @param DateTime $to Find tasks due to start before this DateTime
     * @param DateTime $from Find tasks due to start after this DateTime
     * @return array The query result
     */
    public function findUpcomingTasks($to = '', $from = ''){

        $qb = $this->_em->createQueryBuilder();
        $qb->select('t')
            ->from('BlackRook\TaskBundle\Entity\Task', 't')
            ->where('t.completedAt IS NULL')
            ->andWhere('t.startAt IS NOT NULL')
            ->andWhere('t.startAt > :from')
            ->orderBy('t.startAt', 'ASC')
            ->setParameter('from', $this->_buildDateTime($from));

        if($to) {
            $qb->andWhere('t.startAt < :to')
                ->setParameter('to', $this->_buildDateTime($to));
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * Finds tasks that are uncompleted
     *
     * @return array the query result
     */
    public function findUncompletedTasks(){
        $qb = $this->_em->createQueryBuilder();
        $qb->select('t')
            ->from('BlackRook\TaskBundle\Entity\Task', 't')
            ->where('t.completedAt IS NULL')
            ->orderBy('t.dueAt', 'ASC');

        return $qb->getQuery()->getResult();
    }

    /*
     * Takes a string or DateTime object and returns a valid DateTime
     *
     * @param DateTime|String $dateTime If string transforms the value into a DateTime
     * @return DateTime
     */
    private function _buildDateTime($dateTime = ''){
        if(is_string($dateTime)) {
            $dateTime = new \DateTime($dateTime);
        }
        if(get_class($dateTime) !== "DateTime") {
            throw new UnexpectedTypeException($dateTime, 'DateTime');
        }
        return $dateTime;
    }

}